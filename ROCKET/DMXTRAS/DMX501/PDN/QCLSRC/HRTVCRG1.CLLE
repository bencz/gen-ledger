/* ================================================================= */
/* Object:         HRTVCRG1        *PGM CLP                          */
/*                 Returns the attributes of the passed CRG.         */
/*                                                                   */
/* Synopsis:       The information of the specified CRG is retrieved */
/*                 using the QcstListClusterResourceGroupIn API.     */
/*                                                                   */
/* ----------------------------------------------------------------- */
/*                  Changes made to this source                      */
/*                  ---------------------------                      */
/*                                                                   */
/* Date     Who Description                                          */
/* -------- --- ---------------------------------------------------- */
/* 20040519 FK  Initial delivery                                     */
/* ================================================================= */
             PGM        PARM(&UTLLIB &CRG &INFVLD &CRGTYP &CRGSTS +
                          &PRINOD &PRISTS &BCKNOD &BCKSTS)

/*           Declare parameter variables                              */
             DCL        VAR(&UTLLIB) TYPE(*CHAR) LEN(10)
             DCL        VAR(&CRG) TYPE(*CHAR) LEN(10)
             DCL        VAR(&INFVLD) TYPE(*CHAR) LEN(4)
             DCL        VAR(&CRGTYP) TYPE(*CHAR) LEN(5)
             DCL        VAR(&CRGSTS) TYPE(*CHAR) LEN(10)
             DCL        VAR(&PRINOD) TYPE(*CHAR) LEN(8)
             DCL        VAR(&PRISTS) TYPE(*CHAR) LEN(10)
             DCL        VAR(&BCKNOD) TYPE(*CHAR) LEN(8)
             DCL        VAR(&BCKSTS) TYPE(*CHAR) LEN(10)

/*           Declare constants                                        */

/*           Declare program variables                                */
             DCL        VAR(&APIERR) TYPE(*CHAR) LEN(8)
             DCL        VAR(&ERROR) TYPE(*LGL) VALUE('0')

             DCL        VAR(&RQSHND) TYPE(*CHAR) LEN(16)
             DCL        VAR(&RSLINF) TYPE(*CHAR) LEN(30)

             DCL        VAR(&USRSPC) TYPE(*CHAR) LEN(20)
             DCL        VAR(&USRQ) TYPE(*CHAR) LEN(20)

             DCL        VAR(&LSTHDR) TYPE(*CHAR) LEN(140)
             DCL        VAR(&I) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&STRHDR) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&HDRSIZ) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&HDRSIZ@) TYPE(*CHAR) LEN(4)
             DCL        VAR(&STRLST) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&NBRENT) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&ENTSIZ) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&ENTSIZ@) TYPE(*CHAR) LEN(4)
             DCL        VAR(&STRPOS) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&STRPOS@) TYPE(*CHAR) LEN(4)
             DCL        VAR(&HDRENT) TYPE(*CHAR) LEN(12)
             DCL        VAR(&LSTENT) TYPE(*CHAR) LEN(20)

             DCL        VAR(&NODE) TYPE(*CHAR) LEN(8)
             DCL        VAR(&NODROL) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&NODROL@) TYPE(*CHAR) LEN(4)
             DCL        VAR(&MBRSTS) TYPE(*DEC) LEN(7 0)
             DCL        VAR(&MBRSTS@) TYPE(*CHAR) LEN(4)

             DCL        VAR(&CRGINFSTS) TYPE(*CHAR) LEN(1)
             DCL        VAR(&CRGTYPDEC) TYPE(*DEC) LEN(5 0)
             DCL        VAR(&CRGSTSDEC) TYPE(*DEC) LEN(5 0)

/*           Declare file                                             */

/*           Global monitor                                           */
             MONMSG     MSGID(CPF0000 RCR0000) EXEC(GOTO CMDLBL(ERROR))

/* ----------------------------------------------------------------- */
/*           Main line                                               */
/* ----------------------------------------------------------------- */

/*           Create user space that holds information                */
             CHGVAR     VAR(&USRSPC) VALUE('HRTVCRG   ' || &UTLLIB)
             CALL       PGM(QUSCRTUS) PARM(&USRSPC 'HRTVCRG' +
                          X'00001000' ' ' '*ALL' 'HRTVCRG - +
                          Retrieve Cluster Resource Group' '*YES' +
                          X'00000000')

/*           Create user queue which returns status information      */
             CHGVAR     VAR(&USRQ) VALUE('HRTVCRG   ' || &UTLLIB)
             CALL       PGM(QUSCRTUQ) PARM(&USRQ 'HRTVCRG' 'K' +
                          X'0000001C' X'0000FA00' X'00000001' +
                          X'00000001' '*ALL' 'HRTVCRG - Retrieve +
                          Cluster Resource Group' '*YES' X'00000000')

/*           Retrieve CRG info                                       */
             CHGVAR     VAR(&RSLINF) VALUE(&USRQ)
             CHGVAR     VAR(%SST(&RSLINF 21 10)) +
                          VALUE(X'00000000000000000000')
             CHGVAR     VAR(&APIERR) VALUE(X'00080000')
             CALLPRC    PRC('QcstListClusterResourceGroupIn') +
                          PARM(&RQSHND &USRSPC 'LRGI0100' +
                          'DM_CLUSTER' &CRG &RSLINF &APIERR)
/*           When error while running API                            */
             IF         COND(%BIN(&APIERR 5 4) *NE 0) THEN(SNDPGMMSG +
                          MSGID(RCR0001) MSGF(HAUMSG) MSGDTA(&CRG) +
                          MSGTYPE(*ESCAPE))

/*           Retrieve list information                               */
             CHGVAR     VAR(&APIERR) VALUE(X'00000000')
             CALL       PGM(QUSRTVUS) PARM(&USRSPC X'00000001' +
                          X'0000008C' &LSTHDR &APIERR)
             CHGVAR     VAR(&STRHDR) VALUE(%BIN(&LSTHDR 117 4) + 1)
             CHGVAR     VAR(&HDRSIZ) VALUE(%BIN(&LSTHDR 121 4))
             CHGVAR     VAR(&HDRSIZ@) VALUE(%SST(&LSTHDR 121 4))
             CHGVAR     VAR(&STRLST) VALUE(%BIN(&LSTHDR 125 4) + 1)
             CHGVAR     VAR(&NBRENT) VALUE(%BIN(&LSTHDR 133 4))
             CHGVAR     VAR(&ENTSIZ) VALUE(%BIN(&LSTHDR 137 4))
             CHGVAR     VAR(&ENTSIZ@) VALUE(%SST(&LSTHDR 137 4))
/*           No objects retrieved --> error                          */
             IF         COND(&NBRENT *EQ 0) THEN(SNDPGMMSG +
                          MSGID(RCR0002) MSGF(HAUMSG) MSGDTA(&CRG) +
                          MSGTYPE(*ESCAPE))

/*           Retrieve header information                             */
             CHGVAR     VAR(%BIN(&STRPOS@)) VALUE(&STRHDR)
             CHGVAR     VAR(&APIERR) VALUE(X'00000000')
             CALL       PGM(QUSRTVUS) PARM(&USRSPC &STRPOS@ +
                          X'0000000C' &HDRENT &APIERR)
/*           Extract header variables                                */
             CHGVAR     VAR(&CRGINFSTS) VALUE(%SST(&HDRENT 1 1))
             CHGVAR     VAR(&CRGTYPDEC) VALUE(%BIN(&HDRENT 5 4))
             CHGVAR     VAR(&CRGSTSDEC) VALUE(%BIN(&HDRENT 9 4))
/*           Translate header information                            */
             IF         COND(&CRGINFSTS *EQ '0') THEN(CHGVAR +
                          VAR(&INFVLD) VALUE('*YES'))
             IF         COND(&CRGINFSTS *EQ '1') THEN(CHGVAR +
                          VAR(&INFVLD) VALUE('*NO'))
             IF         COND(&CRGTYPDEC *EQ 1) THEN(CHGVAR +
                          VAR(&CRGTYP) VALUE('*DATA'))
             IF         COND(&CRGTYPDEC *EQ 2) THEN(CHGVAR +
                          VAR(&CRGTYP) VALUE('*APPL'))
             IF         COND(&CRGTYPDEC *EQ 3) THEN(CHGVAR +
                          VAR(&CRGTYP) VALUE('*DEV'))
             IF         COND(&CRGSTSDEC *EQ 10) THEN(CHGVAR +
                          VAR(&CRGSTS) VALUE('*ACTIVE'))
             IF         COND(&CRGSTSDEC *EQ 20) THEN(CHGVAR +
                          VAR(&CRGSTS) VALUE('*INACTIVE'))
             IF         COND(&CRGSTSDEC *EQ 30) THEN(CHGVAR +
                          VAR(&CRGSTS) VALUE('*INDOUBT'))
             IF         COND(&CRGSTS *EQ ' ') THEN(CHGVAR +
                          VAR(&CRGSTS) VALUE('*OTHER'))

/*           Retrieve list entries until end reached                 */
             CHGVAR     VAR(&I) VALUE(1)
 LOOP:       IF         COND(&I *LE &NBRENT) THEN(DO)
/*            Retrieve entry                                         */
              CHGVAR     VAR(&STRPOS) VALUE(&STRLST + ((&I - 1) * +
                          &ENTSIZ))
              CHGVAR     VAR(%BIN(&STRPOS@)) VALUE(&STRPOS)
              CHGVAR     VAR(&APIERR) VALUE(X'00000000')
              CALL       PGM(QUSRTVUS) PARM(&USRSPC &STRPOS@ +
                          X'00000014' &LSTENT &APIERR)
/*            Extract variables                                      */
              CHGVAR     VAR(&NODE) VALUE(%SST(&LSTENT 1 8))
              CHGVAR     VAR(&NODROL) VALUE(%BIN(&LSTENT 9 4))
              CHGVAR     VAR(&NODROL@) VALUE(%SST(&LSTENT 9 4))
              CHGVAR     VAR(&MBRSTS) VALUE(%BIN(&LSTENT 13 4))
              CHGVAR     VAR(&MBRSTS@) VALUE(%SST(&LSTENT 13 4))
/*            Determine variables                                    */
              IF         COND(&NODROL *EQ 0) THEN(DO)
               CHGVAR     VAR(&PRINOD) VALUE(&NODE)
               IF         COND(&MBRSTS *EQ 0) THEN(CHGVAR VAR(&PRISTS) +
                          VALUE('*ACTIVE'))
               IF         COND(&MBRSTS *EQ 1) THEN(CHGVAR VAR(&PRISTS) +
                          VALUE('*INACTIVE'))
               IF         COND(&MBRSTS *EQ 2) THEN(CHGVAR VAR(&PRISTS) +
                          VALUE('*PARTITION'))
              ENDDO
              IF         COND(&NODROL *GT 0) THEN(DO)
               CHGVAR     VAR(&BCKNOD) VALUE(&NODE)
               IF         COND(&MBRSTS *EQ 0) THEN(CHGVAR VAR(&BCKSTS) +
                          VALUE('*ACTIVE'))
               IF         COND(&MBRSTS *EQ 1) THEN(CHGVAR VAR(&BCKSTS) +
                          VALUE('*INACTIVE'))
               IF         COND(&MBRSTS *EQ 2) THEN(CHGVAR VAR(&BCKSTS) +
                          VALUE('*PARTITION'))
              ENDDO
 NEXT:        CHGVAR     VAR(&I) VALUE(&I + 1)
              GOTO       CMDLBL(LOOP)
             ENDDO

/*           Clean-up objects created                                */
             CALL       PGM(QUSDLTUS) PARM(&USRSPC X'00000000')
             MONMSG     MSGID(CPF0000)
             CALL       PGM(QUSDLTUQ) PARM(&USRQ X'00000000')
             MONMSG     MSGID(CPF0000)

             GOTO       CMDLBL(END)

/* ----------------------------------------------------------------- */
/*           Error handling                                          */
/* ----------------------------------------------------------------- */
/*           Ensure that the program does not loop when error        */
 ERROR:      IF         COND(&ERROR) THEN(GOTO CMDLBL(END))
             CHGVAR     VAR(&ERROR) VALUE('1')

/*           Move all *DIAG messages to the previous queue           */
             CHGVAR     VAR(&APIERR) VALUE(X'00000000')
             CALL       PGM(QMHMOVPM) PARM(' ' '*DIAG' X'00000001' +
                          '*' X'00000001' &APIERR)

/*           Resend last escape message                              */
             CHGVAR     VAR(&APIERR) VALUE(X'00000000')
             CALL       PGM(QMHRSNEM) PARM(' ' &APIERR)

 END:        ENDPGM
